{"version":3,"sources":["components/images/poke.JPG","components/TableHeader/TableHeader.js","components/TableData/TableData.js","components/PokemonContainer/PokemonContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TableHeader","props","Row","Col","xs","className","Button","onClick","handleSortName","class","DropdownButton","id","title","dropDownMenuSeed","map","item","Dropdown","Item","handleFilterRegion","name","type1","TableData","pokemonList","key","region","fastAttack","sortedFilteredPokemonList","PokemonContainer","handleSortNameClick","event","preventDefault","console","log","state","nameAlphabetical","reverse","setState","sortNamesAlphabetical","handleFilterRegionClick","filter","target","push","regionSort","removeDuplicates","obj","pos","arr","mapObj","indexOf","sort","a","b","nameA","nameB","Container","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.37416729.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/poke.cb525c52.JPG\";","import React from \"react\";\nimport './TableHeader.css';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Dropdown from 'react-bootstrap/Dropdown';\n\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nfunction TableHeader(props) {\n    // console.log(props);\n    return (\n        <Row >\n            <Col xs={3}></Col>\n\n            <Col xs={6} >\n                <Row className=\"codybuttonsgroup\">\n                    <Col ><Button onClick={props.handleSortName}>Pokemon <i class=\"fas fa-sort\"></i></Button></Col>\n                    <Col >\n                        {/* pass props here to auto fill this list */}\n                        <DropdownButton id=\"dropdown-basic-button\" title=\"Type\">\n                            {\n                            props.dropDownMenuSeed.map(item =>\n                            <Dropdown.Item onClick={props.handleFilterRegion} name={item.type1}>{item.type1}</Dropdown.Item>\n                            )\n                            }\n                        </DropdownButton>\n                    </Col>\n                    <Col ><Button >Region</Button></Col>\n                    <Col ><Button >Attack</Button></Col>\n                </Row>\n            </Col>\n\n            <Col xs={3}></Col>\n        </Row>\n    )\n}\n\nexport default TableHeader;","import React from \"react\";\nimport './TableData.css';\n\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nconst TableData = props => {\n    // console.log(props);\n    return (\n        <>\n            {\n                props.pokemonList.map(item =>\n                    <Row>\n                        <Col xs={3}></Col>\n                        <Col xs={6}>\n                            <Row className=\"tabledata\">\n                                <Col><p key={item.id}>{item.name}</p></Col>\n                                <Col><p key={item.id}>{item.type1}</p></Col>\n                                <Col><p key={item.id}>{item.region}</p></Col>\n                                <Col><p key={item.id}>{item.fastAttack}</p></Col>\n                            </Row>\n                        </Col>\n                        <Col xs={3}></Col>\n                    </Row>\n                )\n            }\n        </>\n    )\n\n}\n\nexport default TableData;","import React, { Component } from \"react\";\nimport './PokemonContainer.css';\nimport TableHeader from \"../TableHeader/TableHeader\";\nimport TableData from \"../TableData/TableData\";\nimport pokemonList from \"../../data/pokemon.json\";\nimport Container from 'react-bootstrap/Container';\nlet dropDownMenuSeed = [];\nlet sortedFilteredPokemonList = [];\n\n//<p>{props.pokemonList[0].name}</p>\nclass PokemonContainer extends Component {\n\n  constructor(props) {\n    super(props);\n\n\n    this.sortNamesAlphabetical();\n    dropDownMenuSeed = this.removeDuplicates(pokemonList, \"type1\");\n\n\n    //as soon as anything in here changes,  render is called\n    this.state = {\n      nameAlphabetical: true,\n      regionSort: \"\"\n    }\n  }\n\n  componentDidMount() {\n\n\n  }\n  //https://ilikekillnerds.com/2016/05/removing-duplicate-objects-array-property-name-javascript/\n  removeDuplicates(pokemonList, type1) {\n    return pokemonList.filter((obj, pos, arr) => {\n      return arr.map(mapObj => mapObj[type1]).indexOf(obj[type1]) === pos;\n    });\n  }\n\n  sortNamesAlphabetical() {\n    //order list alphabetically\n    pokemonList.sort(function (a, b) {\n      let nameA = a.name;\n      var nameB = b.name;\n\n      if (nameA < nameB) {\n        return -1;\n      }\n      if (nameA > nameB) {\n        return 1;\n      }\n\n      // names must be equal\n      return 0;\n    })\n\n    sortedFilteredPokemonList = pokemonList;\n\n\n  }\n\n  handleSortNameClick = event => {\n    event.preventDefault();\n    console.log(\"button clicked\");\n    if (this.state.nameAlphabetical) {\n      pokemonList.reverse();\n      this.setState({\n        nameAlphabetical: false\n      })\n    } else {\n      this.sortNamesAlphabetical();\n      this.setState({\n        nameAlphabetical: true\n      })\n    }\n    console.log(this.state.nameAlphabetical);\n    console.log(\"crappy: \" + pokemonList);\n  }\n\n  handleFilterRegionClick = event => {\n    sortedFilteredPokemonList = [];\n    // console.log(event.target.name);\n    pokemonList.filter(item => {\n    \n      if (item.type1 === event.target.name) {\n        sortedFilteredPokemonList.push(item);\n      }\n    });\n    this.setState({\n      regionSort: event.target.name\n    })\n\n  }\n\n  render() {\n    return (\n\n      <Container className=\"positioning\">\n\n        <TableHeader\n          dropDownMenuSeed={dropDownMenuSeed}\n          handleSortName={this.handleSortNameClick}\n          handleFilterRegion={this.handleFilterRegionClick}\n        ></TableHeader>\n\n\n        <TableData pokemonList={sortedFilteredPokemonList}></TableData>\n\n      </Container>\n\n    )\n  }\n}\n\nexport default PokemonContainer;","//import logo from './logo.svg';\nimport React from 'react';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport DesktopImage from \"./components/images/poke.JPG\";\nimport Container from 'react-bootstrap/Container';\nimport PokemonContainer from \"./components/PokemonContainer/PokemonContainer\";\n\n\n\n\n\nfunction App() {\n  return (\n\n    <Container className=\"background\">\n      <PokemonContainer>\n\n\n      </PokemonContainer>\n    </Container>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}